\documentclass[11pt,a4paper,italian]{article}

\usepackage[italian]{babel}
\usepackage[T1]{fontenc}
\usepackage{geometry}	% Set document margins
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[hidelinks]{hyperref}
\usepackage{color}
\usepackage{graphicx}
\usepackage{textcomp}	% For single quotes in codes
\usepackage{indentfirst}	% For indenting first paragraph
\usepackage{pgfplots}

\title{\textbf{Laboratorio di Algoritmi e Strutture Dati 2020/2021} --- Prima parte}
\date{\today}
%\author{\href{mailto:bonaccorsi.mattia@spes.uniud.it}{Mattia Bonaccorsi}, \href{mailto:kouate.muhamed@spes.uniud.it}{Muhamed Kouate}, \href{mailto:stefanel.enrico@spes.uniud.it}{Enrico Stefanel}, \href{mailto:torchanyn.andriy@spes.uniud.it}{Andriy Torchanyn}}
\author{\textbf{Mattia Bonaccorsi} --- 124610 -- \href{mailto:bonaccorsi.mattia@spes.uniud.it}{bonaccorsi.mattia@spes.uniud.it}
   \and \textbf{Muhamed Kouate} --- 137359 -- \href{mailto:kouate.muhamed@spes.uniud.it}{kouate.muhamed@spes.uniud.it}
   \and \textbf{Enrico Stefanel} --- 137411 -- \href{mailto:stefanel.enrico@spes.uniud.it}{stefanel.enrico@spes.uniud.it}
   \and \textbf{Andriy Torchanyn} --- 139535 -- \href{mailto:torchanyn.andriy@spes.uniud.it}{torchanyn.andriy@spes.uniud.it}
   }


\usepackage{listings} 
\usepackage{setspace} 


\definecolor{halfgray}{gray}{0.55}
\definecolor{snow}{RGB}{250, 250, 250}
\definecolor{green}{RGB}{0, 128, 0}
\definecolor{cyan}{RGB}{64, 128, 128}
\definecolor{folly}{rgb}{1.0, 0.0, 0.31}

\makeatletter
\DeclareRobustCommand{\getlstname}{%
 \begingroup
  % \lstname seems to change hyphens into \textendash
  \def\textendash{-}%
  \filename@parse{\lstname}%
  \edef\filename@base{\detokenize\expandafter{\filename@base}}%
  \texttt{\filename@base.\filename@ext}%
 \endgroup
}
\makeatother


\lstdefinelanguage{python}{
	morekeywords={and,assert,break,def,elif,else,for,from,global,if,import,as,in,is,lambda,not,or,pass,print,return,try,while},
	morekeywords=[2]{abs,all,any,bool,chr,dict,dir,divmod,enumerate,eval,file,filter,float,format,globals,help,id,
	input,int,len,list,locals,long,map,min,next,pow,range,input,round,set,str,sum,super,tuple,type,unichr,unicode,vars}, keywordstyle=\color{green},
	morestring=[b]", morestring=[b]', stringstyle=\color{folly}, showstringspaces=false, upquote=true,
    morecomment=[l]\#, commentstyle=\color{cyan},
    frame=single, framexleftmargin=2em, backgroundcolor=\color{snow},
    numbers=left, numberstyle=\footnotesize\color{halfgray}\ttfamily, xleftmargin=1.5em, basicstyle=\ttfamily\small,
    inputpath=sources/,
    title=\footnotesize\ttfamily\getlstname, captionpos=b
}

\begin{document}

\maketitle
\tableofcontents


\clearpage

\section{Il periodo frazionario}
\textbf{Definizione} Il \textit{periodo frazionario minimo} di una stringa $s$ è il più piccolo intero $p>0$ che soddisfa la proprietà
\begin{equation}
s(i) = s(i+p)\qquad \forall i = 1, \dots , (n-p) \tag{$\star$}
\end{equation}
dove $n$ denota la lunghezza e $s(k)$ \`e il $k$-esimo carattere della stringa $s$.

\textbf{Esempio} Il \emph{periodo frazionario minimo} della stringa \texttt{abcabcab} è 3, mentre il \emph{periodo frazionario minimo} della stringa \texttt{aba} è 2.

Si implementano di seguito due algoritmi scritti in linguaggio Python3 per il calcolo del \emph{periodo frazionario minimo} di una qualsiasi stringa.

In particolare, l'algoritmo \textit{PeriodNa{\"i}ve} con complessità $O(n^2)$, e l'algoritmo \textit{PeriodSmart} con complessità $\Theta(n)$.


\section{Algoritmo \textit{PeriodNa{\"i}ve}}

\subsection{Descrizione dell'algoritmo}
L'algoritmo utilizza un ciclo \texttt{for}  con un intero $p$ che varia da 1 a $n$ e termina restituendo $p$ alla prima iterazione che soddisfa la proprietà ($\star$). Quest'ultima viene verificata confrontando la congruenza tra il prefisso della stringa $s$ fino alla posizione $n-p$, e il suffisso dalla posizione $p$ fino al termine della stringa. Nel caso in cui queste parti combacino, la dimensione $p$ è esattamente il \textit{periodo frazionario minimo} cercato.

\subsection{Codice dell'algoritmo}  
\lstinputlisting[language=Python,linerange={1-13}]{PeriodNaive.py} 

\subsubsection{Osservazioni sul codice}

Alternativamente al controllo della congruenza tra il prefisso $[1 \dots n-p]$ e suffisso $[p \dots n]$, la funzione \textit{isPeriod} potrebbe venire implementata anche con un ciclo secondario per il controllo dell'uguaglianza tra $s(j)$ e $s(j+p)$, con $j$ che varia da $1$ a $n-p$.
Tale implementazione sarebbe stata scritta così:
\lstinputlisting[language=Python,linerange={17-24}]{PeriodNaive.py} 

Il motivo per cui non è stata scelta questa implementazione è che nel caso di un generico input $s$, il ciclo interno si sarebbe fermato alla prima disuguaglianza trovata. Questo avrebbe di certo ottimizzato l'algoritmo in pratica, ma avrebbe reso più difficile un confronto generale tra questo algoritmo e la versione \textit{smart} illustrata di seguito, che ha un andamento lineare sulla dimensione dell'input.


\section{Algoritmo \textit{PeriodSmart}}

\subsection{Descrizione dell'algoritmo}
\textbf{Definizione} Un \textit{bordo} di una stringa $s$ è una qualunque stringa $t$ che sia, allo stesso tempo, prefisso proprio di $s$ e suffisso proprio di $s$.

Si osserva che $p$ è un periodo frazionario di $s$ se e solo se $s = |p|-r$, dove $r$ è la lunghezza di un bordo di $s$. Ciò permette di ridurre il problema del calcolo del periodo frazionario minimo di $s$ al problema del calcolo della lunghezza massima di un bordo di $s$.

Per risolvere quest'ultimo problema si procede per induzione, calcolando per ogni prefisso $s[1,\dots,i]$, dal più corto al più lungo, la lunghezza $r(i)$ del bordo massimo di $s[1,\dots,i]$.
Per implementare il passo induttivo da $i$ a $i+1$ si consideri la sequenza
\begin{equation*}
r(i)>r(r(i))>r(r(r(i)))>\dots>r^{k}(i)=0
\end{equation*}
e si osserva che nel calcolo di $r(i+1)$ solamente i due casi seguenti possono darsi:
\begin{itemize}
\item per qualche indice $j \leq k$ vale l'uguaglianza $s[i+1] = s[r^{j}(i)+1]$. In tal caso, $r(i+1) = r^{j}(i)+1$ dove $j$ è il primo indice per cui vale la suddetta uguaglianza;
\item non esiste alcun indice $j \leq k$ che soddisfi l'uguaglianza $s[i+1] = s[r^{j}(i)+1]$. In tal caso, $r(i+1) = 0$.
\end{itemize}

\subsection{Codice dell'algoritmo}
\lstinputlisting[language=Python]{PeriodSmart.py} 

\section{Calcolo dei tempi di esecuzione dei due algoritmi}
Si vogliono misurare i tempi medi di esecuzione dei due algoritmi \hyperlink{section.2}{\textit{PeriodNa{\"i}ve}} e \hyperlink{section.3}{\textit{PeriodSmart}} al variare della lunghezza $n$ della stringa fornita in input.

\subsection{Calcolo della precisione del sistema}
La precisione della misurazione sperimentale è data dal più piccolo intervallo di tempo che il nostro computer può misurare.

Possiamo stimare la risoluzione del \textit{clock} di sistema utilizzando un ciclo \texttt{while} per calcolare l'intervallo minimo di tempo misurabile.

Successivamente si calcola il \textit{tempo minimo ammissibile} in funzione della risoluzione stimata e dell'errore relativo ammissibile (pari, nel nostro caso, a $0.001$).
\lstinputlisting[language=Python,linerange={8-20}]{Complexity.py}
Il \textit{tempo minimo ammissibile}, nel calcolatore utilizzato, è di \texttt{0.0009546279907226562} secondi.

\subsection{Generazione dell'\textit{array} delle dimensioni degli input}
Si definisce un \textit{array} \texttt{sizes} di lunghezze $n$ dell'input con distribuzione esponenziale per ottenere un buon compromesso in termini di efficienza e di completezza dello studio. Tale \textit{array} viene definito come l'insieme di tutti i valori  $ \bigl\lfloor A \cdot B^i \bigl\rfloor $ , con $ 0 \leq i <  100 $ e $A, B$ calcolati opportunamente in modo da avere $n = 1000$ quando $i = 0$, e $n = 500000$ quando $i = 99$.
\begin{gather*}
\bigl\lfloor A \cdot B^i \bigl\rfloor = 1000 \quad \text{se} \quad i = 0 \qquad \Rightarrow \qquad \bigl\lfloor A \cdot 1 \bigl\rfloor = 1000 \qquad \Rightarrow \qquad A = 1000\\
\bigl\lfloor 1000 \cdot B^i \bigl\rfloor = 500000 \quad \text{se} \quad i = 99 \qquad \Rightarrow \qquad \bigl\lfloor B^{99} \bigl\rfloor = 500 \qquad \Rightarrow \qquad B = \sqrt[99]{500}
\end{gather*}
\lstinputlisting[language=Python,linerange={24-27}]{Complexity.py}
\lstinputlisting[language=Python,linerange={10-18}]{InputGenerator.py}

\begin{center}
\begin{tikzpicture}[scale=0.7]
\pgfplotsset{
    width=1.25\textwidth,
    height=0.95\textwidth
}
\begin{axis}[
	title={Dimensione degli input},
    xlabel={\small ID dell'input},
    ylabel={\small Dimensione dell'input (\textit{caratteri})},
	grid,
	grid style={dotted,gray},
	axis x line=bottom,
    axis y line=left,
]
\addplot[mark=*, green] table [x=id, y=size, col sep=comma]{sources/results.csv};
\end{axis}
\end{tikzpicture}
\end{center}

\subsection{Generazione dell'\textit{array} degli input}
Sono stati implementati diverse procedure per la generazione delle stringhe da utilizzare come input nel calcolo dei tempi di esecuzione degli algoritmi.

Dopo attente analisi e sperimentazioni, si è deciso di utilizzare la procedura \textit{Random3}, descritta di seguito.

La stringa $s$ di lunghezza $n$ viene generata su un alfabeto ternario \texttt{\{a,b,c\}} in modo che ogni lettera $s(i)$ della stringa sia generata in modo pseudo-casuale indipendentemente dalle altre fino alla posizione $q-1$, parametro scelto randomicamente nell'intervallo $[1,n]$. Ad $s(q)$ viene assegnato il carattere ``\texttt{d}'', mentre per le lettere rimanenti si procede assegnando a $s(i)$ il valore di $s( (i-1) \mod q )$.
\lstinputlisting[language=Python,linerange={3-8,36-46}]{InputGenerator.py}
Con questa implementazione, ci si aspetta che il risultato degli algoritmi coincida con la posizione del carattere ``\texttt{d}'', ovvero con il parametro \textit{q}.

\subsection{Calcolo del tempo medio}
Vengono salvati in due array \texttt{growth\_PN} e \texttt{growth\_PS} rispettivamente i tempi di esecuzione dell'algoritmo \hyperlink{section.2}{\textit{PeriodNa{\"i}ve}} e \hyperlink{section.3}{\textit{PeriodSmart}} al variare della lunghezza $n$ della stringa fornita in input, seguendo la distribuzione indicata dall'array \texttt{strings} calcolata \hyperlink{subsection.4.3}{in precedenza}.
\lstinputlisting[language=Python,linerange={34-62}]{Complexity.py}

\subsection{Risultati della sperimentazione}

Visualizzando i risultati dei tempi di esecuzione con le rispettive lunghezze dell'input, si ottengono i grafici che seguono:

\begin{center}
\begin{tikzpicture}[scale=0.7]
\pgfplotsset{
    width=1.25\textwidth,
    height=0.95\textwidth
}

\begin{axis}[
    axis line style={->},
	axis x line=bottom,
	xtick=\empty,
    axis y line=right,
    ylabel near ticks, yticklabel pos=right,
    ylabel={Risultato dell'algoritmo},
	opacity=0.4,
	every y tick scale label/.style={at={(yticklabel cs:1)},anchor=south east},
]
\addplot[mark=*, black, fill opacity=0.10, draw opacity=0.10] table [x=size, y=result_PS, col sep=comma]{sources/results.csv};
\end{axis}

\begin{axis}[
	title={Tempi di esecuzione in relazione alla dimensione dell'input e risultato degli algoritmi},
    axis line style={->},
    xlabel={\small Dimensione dell'input (\textit{numero di caratteri})},
    ylabel={\small Tempo (\textit{sec})},
	grid,
	grid style={dotted,gray},
	axis x line=bottom,
    axis y line=left,
    legend style={ at={(0.95,0.05)}, anchor=south east},
    every x tick scale label/.style={at={(xticklabel cs:1)},anchor=north},
	]
\addplot[mark=*, blue] table [x=size, y=time_PN, col sep=comma]{sources/results.csv};
\addplot[mark=*, orange] table [x=size, y=time_PS, col sep=comma]{sources/results.csv};
\addlegendentry{Algoritmo \textit{PeriodNa{\"i}ve}}
\addlegendentry{Algoritmo \textit{PeriodSmart}}
\end{axis}

\end{tikzpicture}
\end{center}



\begin{center}
\begin{tikzpicture}[scale=0.7]
\pgfplotsset{
    width=1.25\textwidth,
    height=0.95\textwidth
}

\begin{axis}[
	xmode=log,
	ymode=log,
    axis line style={->},
	axis x line=bottom,
	xtick=\empty,
    axis y line=right,
  	ylabel={Risultato dell'algoritmo},
	opacity=0.4
]
\addplot[mark=*, black, fill opacity=0.10, draw opacity=0.10] table [x=size, y=result_PS, col sep=comma]{sources/results.csv};
\end{axis}

\begin{axis}[
	xmode=log,
	ymode=log,
	title={Tempi di esecuzione in relazione alla dimensione dell'input e risultato degli algoritmi},
	xlabel={\small Dimensione dell'input (\textit{numero di caratteri})},
    ylabel={\small Tempo (\textit{sec})},
    legend style={ at={(0.95,0.05)}, anchor=south east},
	grid,
	grid style={dotted,gray},
	axis x line=bottom,
    axis y line=left,
]
\addplot[mark=*, blue] table [x=size, y=time_PN, col sep=comma]{sources/results.csv};
\addplot[mark=*, orange] table [x=size, y=time_PS, col sep=comma]{sources/results.csv};
\addlegendentry{Algoritmo \textit{PeriodNa{\"i}ve}}
\addlegendentry{Algoritmo \textit{PeriodSmart}}
\end{axis}

\end{tikzpicture}
\end{center}

Entrambi i grafici confermano l'andamento lineare dell'algoritmo \textit{PeriodSmart} al variare della dimensione dell'input.

Per quanto riguarda l'algoritmo \textit{PeriodNa{\"i}ve}, invece, i tempi di esecuzione sono molto più legati all'input: avendo inserito anche il risultato degli algoritmi, possiamo notare come un risultato molto inferiore alla dimensione dell'input coincida con un tempo di esecuzione molto ridotto. Al contrario, a risultati molto vicini alla dimensione dell'input coincide un tempo di esecuzione molto superiore. In generale, si può affermare dai grafici che la complessità di \textit{PeriodNa{\"i}ve} sia nell'ordine di $n^2$ nel caso peggiore, ovvero una complessità complessiva di $O(n^2)$.


\section{Ulteriori osservazioni}

\subsection{Caso pessimo per l'algoritmo PeriodNa{\"i}ve}

\subsubsection{Ideazione dell'input}
Ritorniamo sul primo algoritmo proposto in questo studio
\lstinputlisting[language=Python,linerange={1-13}]{PeriodNaive.py} 
e ci chiediamo come debba essere formato un input che funga da caso pessimo.

Notiamo che il codice principale è composto da un ciclo \texttt{for} con indice $p$ varia da 1 alla lunghezza dell'input, ma termina se la porzione della stringa dall'inizio fino alla posizione $p$ è un periodo frazionario minimo. Dunque, per massimizzare i tempi di esecuzione, dobbiamo massimizzare la posizione $p$ che rende vero il controllo citato.

Una possibile implementazione del codice per la creazione di tale input può essere formalizzato come segue: la stringa $s$ di lunghezza $n$ viene generata su un alfabeto ternario \texttt{\{a,b,c\}} in modo tale che per ogni sottostringa $t$ che va da un carattere \texttt{a} non preceduto da altro \texttt{a}, al primo carattere \texttt{c} non seguito da un altro \texttt{c} è generata seguendo lo schema
\begin{equation*}
t(i) = i*\texttt{a} + i*\texttt{b} + i*\texttt{c}
\end{equation*}
dove $i*\texttt{n}$ indica il carattere \texttt{n} ripetuto $i$ volte.
La stringa $s$ così formata, viene troncata se necessario al raggiungimento del $n$-esimo carattere.

\textbf{Esempi} Un esempio di stringa formata in questo modo è:
\begin{equation*}
s(30) = \underbrace{\texttt{abc}}_{t(1)} \underbrace{\texttt{aabbcc}}_{t(2)} \underbrace{\texttt{aaabbbccc}}_{t(3)} \underbrace{\texttt{aaaabbbbcccc}}_{t(4)},
\end{equation*}
mentre un altro esempio (con l'ultima sottostringa $t$ ``non completa'') è
\begin{equation*}
s(40) = \underbrace{\texttt{abc}}_{t(1)} \underbrace{\texttt{aabbcc}}_{t(2)} \underbrace{\texttt{aaabbbccc}}_{t(3)} \underbrace{\texttt{aaaabbbbcccc}}_{t(4)} \underbrace{\texttt{aaaaabbbbb\textcolor{red}{ccccc}}}_{t(5)}.
\end{equation*}

\subsection{Codice dell'algoritmo}
\lstinputlisting[language=Python,linerange={47-57}]{InputGenerator.py} 

\subsubsection{Risultati della sperimentazione}

Effettuando la sperimentazione con la stessa procedura descritta in precedenza, ma utilizzando la procedura \textit{\_StringGenerator\_4} per la generazione delle stringhe

\begin{center}
\begin{tikzpicture}[scale=0.7]
\pgfplotsset{
    width=1.25\textwidth,
    height=0.95\textwidth
}

\begin{axis}[
    axis line style={->},
	axis x line=bottom,
	xtick=\empty,
    axis y line=right,
    ylabel near ticks, yticklabel pos=right,
    ylabel={Risultato dell'algoritmo},
	opacity=0.4,
	every y tick scale label/.style={at={(yticklabel cs:1)},anchor=south east},
]
\addplot[mark=*, black, fill opacity=0.10, draw opacity=0.10] table [x=size, y=result_PS, col sep=comma]{sources/results_worst_pn.csv};
\end{axis}

\begin{axis}[
	title={Tempi di esecuzione in relazione alla dimensione dell'input e risultato dell'algoritmo},
    axis line style={->},
    xlabel={\small Dimensione dell'input (\textit{numero di caratteri})},
    ylabel={\small Tempo (\textit{sec})},
	grid,
	grid style={dotted,gray},
	axis x line=bottom,
    axis y line=left,
    legend style={ at={(0.95,0.05)}, anchor=south east},
    every x tick scale label/.style={at={(xticklabel cs:1)},anchor=north},
	]
\addplot[mark=*, blue] table [x=size, y=time_PN, col sep=comma]{sources/results_worst_pn.csv};
\addlegendentry{Algoritmo \textit{PeriodNa{\"i}ve}}
\addlegendentry{Algoritmo \textit{PeriodSmart}}
\end{axis}

\end{tikzpicture}
\end{center}



\end{document}
